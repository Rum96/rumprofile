{
  "code": "import { ui } from \"../ui/layaMaxUI\";\r\nexport default class MapScene extends ui.test.MapSceneUI {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.selectState = 0;\r\n        this.isMouseDown = false;\r\n        this.pathPoints = [];\r\n        this.pointArr = [];\r\n    }\r\n    onEnable() {\r\n        for (let i = 0; i < this.box_build.numChildren; ++i) {\r\n            let build = this.box_build.getChildAt(i);\r\n            build.on(Laya.Event.CLICK, this, this.buildOnclick, [i]);\r\n        }\r\n        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);\r\n        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);\r\n        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);\r\n        this.imgW = this.img_map.width;\r\n        this.imgH = this.img_map.height;\r\n        this.stageW = Laya.stage.width;\r\n        this.stageH = Laya.stage.height;\r\n        this.drawSp = this.img_map.addChild(new Laya.Sprite);\r\n        this.drawSp.zOrder = 1000;\r\n        this.test();\r\n        this.test2(this.pointArr, 0, 5);\r\n    }\r\n    onMouseDown(e) {\r\n        this.isMouseDown = true;\r\n    }\r\n    onMouseMove(e) {\r\n        if (!this.isMouseDown)\r\n            return;\r\n        let sx = e.stageX;\r\n        let sy = e.stageY;\r\n        if (this.lastX == void (0)) {\r\n            this.lastX = sx;\r\n            this.lastY = sy;\r\n            return;\r\n        }\r\n        let dx = sx - this.lastX;\r\n        let dy = sy - this.lastY;\r\n        this.img_map.pos(this.img_map.x + dx, this.img_map.y + dy);\r\n        this.lastX = sx;\r\n        this.lastY = sy;\r\n    }\r\n    onMouseUp(e) {\r\n        this.isMouseDown = false;\r\n        this.lastX = this.lastY = null;\r\n    }\r\n    buildOnclick(index) {\r\n        this.getNearPos(index);\r\n        if (this.selectState == 0) {\r\n            this.selectState = 1;\r\n        }\r\n        else {\r\n            this.selectState = 0;\r\n        }\r\n        let build = this.box_build.getChildAt(index);\r\n        build.alpha = 0.9;\r\n        this.pathPoints.push(build.x, build.y);\r\n        this.drawLines();\r\n    }\r\n    getNearPos(index) {\r\n        let build = this.box_build.getChildAt(index);\r\n        let bx = build.x;\r\n        let by = build.y;\r\n        let mindis = 10000000;\r\n        let minpindex = 0;\r\n        for (let i = 0; i < this.box_point.numChildren; ++i) {\r\n            let point = this.box_point.getChildAt(i);\r\n            let px = point.x;\r\n            let py = point.y;\r\n            let dis = (py - by) * (py - by) + (px - bx) * (px - bx);\r\n            if (dis < mindis) {\r\n                mindis = dis;\r\n                minpindex = i;\r\n            }\r\n        }\r\n        let point = this.box_point.getChildAt(minpindex);\r\n        point.alpha = 0.9;\r\n        this.pathPoints.push(point.x, point.y);\r\n    }\r\n    drawLines() {\r\n        this.drawSp.graphics.clear();\r\n        this.drawSp.graphics.drawLines(0, 0, this.pathPoints, \"#ff0000\", 4);\r\n    }\r\n    test() {\r\n        let pointdata = [\r\n            \"2_2,4_1,5_1\",\r\n            \"1_2,3_4,18_6\",\r\n            \"2_4,6_2\",\r\n            \"1_2,5_2,10_3\",\r\n            \"1_2,4_2,11_3\",\r\n            \"3_2,12_3\",\r\n            \"13_2\",\r\n            \"15_2\",\r\n            \"10_4\",\r\n            \"9_4,4_3,16_2\",\r\n            \"5_3,17_2\",\r\n            \"6_3,13_3,20_3\",\r\n            \"12_3,7_2,14_1\",\r\n            \"13_1,15_1\",\r\n            \"14_1,8_2\",\r\n            \"10_2,17_1\",\r\n            \"16_1,18_2\",\r\n            \"17_2,19_1\",\r\n            \"18_1,22_1,20_3\",\r\n            \"19_3,12_3,21_3,24_3\",\r\n            \"20_3\",\r\n            \"19_1,23_1\",\r\n            \"22_1\",\r\n            \"20_3\"\r\n        ];\r\n        let pointArr = [];\r\n        for (let i = 0; i < pointdata.length; ++i) {\r\n            pointArr[i] = new Array(24).fill(Infinity);\r\n            pointArr[i][i] = 0;\r\n            let datai = pointdata[i];\r\n            let dataarr = datai.split(\",\");\r\n            for (let j = 0; j < dataarr.length; ++j) {\r\n                let dataj = dataarr[j];\r\n                let datajarr = dataj.split(\"_\");\r\n                let index = +datajarr[0] - 1;\r\n                let value = +datajarr[1];\r\n                pointArr[i][index] = value;\r\n            }\r\n        }\r\n        this.pointArr = pointArr;\r\n    }\r\n    test2(matrix, start = 0, end = 0) {\r\n        const rows = matrix.length, cols = matrix[0].length;\r\n        if (rows !== cols || start >= rows)\r\n            return new Error(\"邻接矩阵错误或者源点错误\");\r\n        const distance = new Array(rows).fill(Infinity);\r\n        distance[start] = 0;\r\n        for (let i = 0; i < rows; i++) {\r\n            if (distance[i] < Infinity) {\r\n                for (let j = 0; j < cols; j++) {\r\n                    if (matrix[i][j] + distance[i] < distance[j]) {\r\n                        distance[j] = matrix[i][j] + distance[i];\r\n                        if (j == end)\r\n                            console.log(\"xxxxx\", j);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(distance);\r\n        return distance;\r\n    }\r\n}\r\n",
  "references": [
    "D:/LayaDemo/CampusNavigation/src/ui/layaMaxUI.ts"
  ]
}
